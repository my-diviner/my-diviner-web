import { JSX } from "preact";
import { classSet } from "../src.deps.ts";

export type LogoProps = JSX.HTMLAttributes<HTMLImageElement>;

export function Logo(props: LogoProps): JSX.Element {
  return (
    <img
      src="/my-diviner-icon-alpha.png"
      alt="My Diviner"
      {...props}
    /> // class={classSet(props, "my-6")}
  );
}


import { Logo } from "../atoms/Logo.tsx";
import {
  Action,
  ActionStyleTypes,
  classSet,
  Header,
  HeaderProps,
} from "../src.deps.ts";

export function MyDivinerHeader(props: HeaderProps) {
  return (
    <Header
      logo={
        <Action
          href="/"
          actionStyle={ActionStyleTypes.Link | ActionStyleTypes.Rounded}
        >
          <Logo />
        </Action>
      }
      {...props}
    />
  );
}


import { ComponentChildren, isValidElement, JSX, VNode } from "../src.deps.ts";
import { classSet } from "../utils/jsx.utils.ts";

export enum ActionStyleTypes {
  Solid = 1 << 0,
  Outline = 1 << 1,
  Link = 1 << 2,
  Rounded = 1 << 3,
  Icon = 1 << 4,
  None = 1 << 5,
  All = ~0 << 6,
}

export function useActionChildren(
  children: ComponentChildren | Array<ActionProps>,
): { nav: ComponentChildren; navActions: Array<ActionProps> | undefined } {
  const nav = Array.isArray(children) //&& children.every(item => item instanceof ActionProps)
    ? undefined
    : (children as ComponentChildren);

  const navActions = Array.isArray(children) //&& children.every(item => item instanceof ActionProps)
    ? (children as Array<ActionProps>)
    : undefined;

  return { nav, navActions };
}

export type ActionAnchorProps = JSX.HTMLAttributes<HTMLAnchorElement>;

export type ActionButtonProps = JSX.HTMLAttributes<HTMLButtonElement>;

export type ActionProps = (ActionAnchorProps | ActionButtonProps) & {
  actionStyle?: ActionStyleTypes;
};

export function Action(props: ActionProps) {
  const actionStyle = props.actionStyle ||
    ActionStyleTypes.Solid | ActionStyleTypes.Rounded | ActionStyleTypes.Link;

  const shared = (
    <div
      class={classSet(
        [
          "-:block -:font-bold",
          "-:transition-colors -:duration-200 -:ease-out",
          (actionStyle & ActionStyleTypes.Icon) === ActionStyleTypes.Icon
            ? "-:px-2 -:py-2 -:hover:text-blue-700 -:hover:text-opacity-80"
            : "-:px-4 -:py-2",
          (actionStyle & ActionStyleTypes.Rounded) === ActionStyleTypes.Rounded
            ? (actionStyle & ActionStyleTypes.Icon) === ActionStyleTypes.Icon
              ? "-:rounded-full"
              : "-:rounded"
            : "",
          (actionStyle & ActionStyleTypes.Solid) === ActionStyleTypes.Solid
            ? "-:bg-blue-500 -:text-white"
            : "-:text-black -:dark:text-white",
          (actionStyle & ActionStyleTypes.Outline) === ActionStyleTypes.Outline
            ? "-:text-blue-700 -:border-blue-700 -:border-solid -:border -:hover:border-blue-900"
            : "-:border-none",
          (actionStyle & ActionStyleTypes.Link) === ActionStyleTypes.Link &&
            (actionStyle & ActionStyleTypes.Icon) !== ActionStyleTypes.Link
            ? "-:hover:bg-blue-700 -:hover:bg-opacity-80 -:hover:text-white"
            : "",
        ],
        props,
      )}
    >
    </div>
  );

  return (
    <>
      {!props.href && (
        <button {...(props as ActionButtonProps)} class={shared.props.class} />
      )}

      {props.href && (
        <a {...(props as ActionAnchorProps)} class={shared.props.class} />
      )}
    </>
  );
}


import { ForwardedRef, forwardRef, JSX } from "../../src.deps.ts";
import { classSet } from "../../utils/jsx.utils.ts";

export function numMaxLengthShield(
  e: JSX.TargetedKeyboardEvent<HTMLInputElement>,
) {
  if (e.currentTarget.value.length >= e.currentTarget.maxLength) {
    e.currentTarget.value = e.currentTarget.value.slice(
      0,
      e.currentTarget.maxLength - 1,
    );
  }
}

export type InputProps =
  & {
    multiline?: boolean;
    // prepareValue?: (value: string) => string;

    ref?: ForwardedRef<HTMLInputElement | HTMLTextAreaElement>;
  }
  & (
    | JSX.HTMLAttributes<HTMLInputElement>
    | JSX.HTMLAttributes<HTMLTextAreaElement>
  );

export const Input = forwardRef(
  (
    props: InputProps,
    ref: ForwardedRef<HTMLInputElement | HTMLTextAreaElement>,
  ) => {
    // const { prepareValue, value, ...rest } = props;

    // const [valueState, setValue] = useState(value);

    // const onValueChange = (value: string) => {
    //   if (prepareValue) {
    //     value = prepareValue(value);
    //   }

    //   setValue(value);
    // };

    // const onTextAreaChange = (
    //   e: JSX.TargetedEvent<HTMLTextAreaElement, Event>,
    // ) => {
    //   const target = (e.target as HTMLTextAreaElement)!;

    //   onValueChange(target.value);
    // };

    // const onInputChange = (e: JSX.TargetedEvent<HTMLInputElement, Event>) => {
    //   const target = (e.target as HTMLInputElement)!;

    //   onValueChange(target.value);
    // };

    // onChange={onTextAreaChange}
    // value={valueState}
    // onChange={onInputChange}
    // value={valueState}
    const input = props.multiline
      ? (
        <textarea
          {...(props as JSX.HTMLAttributes<HTMLTextAreaElement>)}
          ref={ref as ForwardedRef<HTMLTextAreaElement>}
          class={classSet(
            [
              "-:w-full -:px-4 -:py-2 -:text-gray-800 -:dark:text-gray-100 -:bg-white -:dark:bg-gray-700 -:border -:border-gray-300 -:rounded-md -:shadow-sm -:focus:outline-none -:focus:ring-2 -:focus:ring-blue-500 -:focus:border-blue-500",
            ],
            props,
          )}
        >
        </textarea>
      )
      : (
        <input
          {...(props as JSX.HTMLAttributes<HTMLInputElement>)}
          ref={ref as ForwardedRef<HTMLInputElement>}
          type={props.type || "text"}
          class={classSet(
            [
              "-:w-full -:px-4 -:py-2 -:text-gray-800 -:dark:text-gray-100 -:bg-white -:dark:bg-gray-700 -:border -:border-gray-300 -:rounded-md -:shadow-sm -:focus:outline-none -:focus:ring-2 -:focus:ring-blue-500 -:focus:border-blue-500",
            ],
            props,
          )}
        />
      );

    return input;
  },
);


import { ComponentChildren, JSX } from "../../src.deps.ts";
import { classSet } from "../../utils/jsx.utils.ts";

export type InputWrapperProps = {
  children: ComponentChildren;

  isNumber?: boolean;

  position?: "prefix" | "suffix";

  text?: string;
} & JSX.HTMLAttributes<HTMLDivElement>;

export function InputWrapper(props: InputWrapperProps) {
  const position = props.position || "suffix";

  return (
    <div
      data-after-content={props.text || ""}
      {...props}
      class={classSet(
        [
          "-:relative -:after:absolute -:after:content-[attr(data-after-content)] -:after:transition-all",
          "-:after:text-gray-600 -:dark:after:text-gray-400",
          position === "suffix" ? "-:after:right-2" : "-:after:left-2",
          props.isNumber && position === "suffix"
            ? "-:focus-within:after:right-6 -:hover:after:right-6"
            : undefined,
        ],
        props,
      )}
    >
      {props.children}
    </div>
  );
}


import {
  ComponentChildren,
  ForwardedRef,
  forwardRef,
  JSX,
} from "../../src.deps.ts";
import { classSet } from "../../utils/jsx.utils.ts";

export type SelectProps = {
  children: ComponentChildren;

  ref?: ForwardedRef<HTMLSelectElement>;
} & JSX.HTMLAttributes<HTMLSelectElement>;

export const Select = forwardRef(
  (props: SelectProps, ref: ForwardedRef<HTMLSelectElement>) => {
    return (
      <select
        {...props}
        ref={ref}
        class={classSet(
          [
            "-:w-full -:text-gray-800 -:dark:text-gray-100 -:bg-white -:dark:bg-gray-700 -:border -:border-gray-400 -:hover:border-gray-500 -:px-4 -:py-2 -:rounded-lg -:shadow-sm -:focus:outline-none -:focus:shadow-lg -:focus:border-blue-500 -:placeholder-gray-500",
          ],
          props,
        )}
      >
        {props.children}
      </select>
    );
  },
);


import { ForwardedRef } from "../../src.deps.ts";
import {
  ComponentChildren,
  forwardRef,
  JSX,
  useState,
} from "../../src.deps.ts";
import { classSet } from "../../utils/jsx.utils.ts";

export type SlideToggleProps = {
  children?: ComponentChildren;

  ref?: ForwardedRef<HTMLInputElement>;
} & JSX.HTMLAttributes<HTMLInputElement>;

export const SlideToggle = forwardRef(
  (props: SlideToggleProps, ref: ForwardedRef<HTMLInputElement>) => {
    // const { checked, value, ...rest } = props;

    // const [checkedState, setCheckedState] = useState(checked);

    //       // onChange={() => setCheckedState(!checked)}
    //       // value={value}
    //       // checked={checkedState}
    return (
      <label class="relative flex flex-wrap items-center cursor-pointer">
        <input {...props} type="checkbox" ref={ref} class="sr-only peer" />

        <div
          class={classSet(
            [
              "-:flex-none -:w-11 -:h-6 -:rounded-full",
              "-:bg-gray-200 -:dark:bg-gray-700 -:border-gray-400 -:dark:border-gray-600",
              "-:after:content-[''] -:after:absolute -:after:top-[2px] -:after:left-[2px] -:after:border -:after:rounded-full -:after:h-5 -:after:w-5 -:after:transition-all",
              "-:after:bg-white -:after:border-gray-300",
              // '-:peer-focus:outline-none -:peer-focus:ring-4 -:peer-focus:ring-blue-300 -:dark:peer-focus:ring-blue-800',
              "-:peer-checked:after:translate-x-full -:peer-checked:after:border-white -:peer-checked:bg-green-200 -:peer-checked:dark:bg-green-700",
            ],
            props,
          )}
        >
        </div>

        {props.children}
      </label>
    );
  },
);


import { ComponentChildren, JSX } from "../src.deps.ts";
import {
  Action,
  ActionProps,
  ActionStyleTypes,
  useActionChildren,
} from "../atoms/Action.tsx";
import { classSet } from "../utils/jsx.utils.ts";
import { MenuButton, MenuButtonStyleTypes } from "./MenuButton.tsx";

export interface ActionGroupProps extends JSX.HTMLAttributes<HTMLElement> {
  actionStyle?: ActionStyleTypes;

  children?: ComponentChildren | Array<ActionProps>;
}

export function ActionGroup(props: ActionGroupProps) {
  const { nav, navActions } = useActionChildren(props.children);

  const children: ComponentChildren = nav ||
    navActions?.map((action) => (
      <Action actionStyle={props.actionStyle} {...action} />
    ));

  return (
    <nav {...props} class={classSet(["-:px-2 -:flex -:items-center"], props)}>
      {children}
    </nav>
  );
}


import { ComponentChildren, JSX } from "../src.deps.ts";
import { classSet } from "../utils/jsx.utils.ts";

export enum DisplayStyleTypes {
  Top = 1 << 0,
  Center = 1 << 1,
  Bottom = 1 << 2,
  Large = 1 << 3,
  None = 1 << 4,
}

export type DisplayProps = JSX.HTMLAttributes<HTMLDivElement> & {
  displayStyle?: DisplayStyleTypes;

  title?: string | ComponentChildren;
};

export function useDisplayChildren(
  children: ComponentChildren | Array<DisplayProps>,
): {
  display: ComponentChildren;
  displayDetails: Array<DisplayProps> | undefined;
  displayElement: ComponentChildren;
} {
  const display = Array.isArray(children) //&& children.every(item => item instanceof DisplayProps)
    ? undefined
    : (children as ComponentChildren);

  const displayDetails = Array.isArray(children) //&& children.every(item => item instanceof DisplayProps)
    ? (children as Array<DisplayProps>)
    : undefined;

  const displayElement = display || (
    <>
      {displayDetails?.map((dd) => <Display {...dd} />)}
    </>
  );

  return { display, displayDetails, displayElement };
}

export function Display(props: DisplayProps) {
  const displayStyle = props.displayStyle || DisplayStyleTypes.None;

  const displayTitle = typeof props.title === "string"
    ? (
      <h1
        class={classSet([
          "font-bold",
          (displayStyle & DisplayStyleTypes.Large) === DisplayStyleTypes.Large
            ? "text-3xl md:text-4xl inline-block"
            : "text-2xl md:text-3xl inline-block",
        ])}
      >
        {props.title}
      </h1>
    )
    : (
      props.title as ComponentChildren
    );

  return (
    <div
      {...props}
      class={classSet(
        [
          "-:flex -:flex-col",
          (displayStyle & DisplayStyleTypes.Center) === DisplayStyleTypes.Center
            ? "-:justify-center -:items-center"
            : undefined,
          (displayStyle & DisplayStyleTypes.Top) === DisplayStyleTypes.Top
            ? "-:justify-start -:items-start"
            : undefined,
          (displayStyle & DisplayStyleTypes.Bottom) === DisplayStyleTypes.Bottom
            ? "-:justify-end -:items-end"
            : undefined,
        ],
        props,
      )}
    >
      {displayTitle}

      {props.children}
    </div>
  );
}


import { ComponentChildren, JSX, useEffect, useState } from "../src.deps.ts";
import { classSet } from "../utils/jsx.utils.ts";

export type LineItemProps = Omit<JSX.HTMLAttributes<HTMLDivElement>, "icon"> & {
  actionPath: string;

  actionText: ComponentChildren;

  confirmAction?: () => Promise<void>;

  confirmIcon?: ComponentChildren;

  confirmRedirect?: string;

  confirmText?: string;
};

export function LineItem(props: LineItemProps) {
  const [reload, setReload] = useState(false);

  const {
    actionText,
    actionPath,
    confirmAction,
    confirmIcon,
    confirmRedirect,
    confirmText,
  } = props;

  const handleAction = async () => {
    if (confirmAction) {
      if (confirmText && confirm(confirmText)) {
        await confirmAction();
      } else {
        await confirmAction();
      }

      setReload(true);
    }
  };

  useEffect(() => {
    if (reload) {
      location.href = confirmRedirect || `${location.href}`;
    }
  }, [reload]);

  return (
    <div>
      <a href={actionPath} class="text-blue-500 hover:underline">
        {actionText}
      </a>

      {confirmIcon && (
        <button
          class="ml-2"
          onClick={() => {
            handleAction().then();
          }}
        >
          {confirmIcon}
        </button>
      )}
    </div>
  );
}


import { ComponentChildren, JSX, useEffect, useState } from "../src.deps.ts";
import {
  Action,
  ActionProps,
  ActionStyleTypes,
  useActionChildren,
} from "../atoms/Action.tsx";
import { classSet } from "../utils/jsx.utils.ts";

export enum MenuButtonStyleTypes {
  Popover = 1 << 0,
  Slideout = 1 << 1,
  Responsive = 1 << 2,
}

export interface MenuButtonProps extends JSX.HTMLAttributes<HTMLElement> {
  children?: ComponentChildren | Array<ActionProps>;

  menuStyle?: MenuButtonStyleTypes;

  toggleChildren: ComponentChildren;
}

export function MenuButton(props: MenuButtonProps) {
  const { nav, navActions } = useActionChildren(props.children);

  const [showMenu, setShowMenu] = useState(false);

  const menuCloseCheck = (eTarget: HTMLDivElement) => {
    setShowMenu(!!eTarget!.closest(".menu-wrapper"));
  };

  const outsideClickHandler = () => {
    const eventHandler = (e: MouseEvent) => {
      menuCloseCheck(e.target as HTMLDivElement);
    };

    window.document.addEventListener("click", eventHandler);

    return () => {
      window.document.removeEventListener("click", eventHandler);
    };
  };

  useEffect(outsideClickHandler, []);

  return (
    <>
      <div class={classSet(["menu-wrapper -:relative"], props)}>
        <Action
          actionStyle={ActionStyleTypes.Link |
            ActionStyleTypes.Rounded |
            ActionStyleTypes.Icon}
          onClick={() => setShowMenu(!showMenu)}
          class="flex items-center"
        >
          {props.toggleChildren}
        </Action>

        {showMenu && (
          <div
            class={classSet([
              "bg-gray-300 dark:bg-gray-700 shadow-md",
              props.menuStyle === MenuButtonStyleTypes.Popover
                ? "absolute right-0 mt-2"
                : undefined,
              props.menuStyle === MenuButtonStyleTypes.Slideout
                ? "fixed top-0 bottom-0 left-0 z-50 w-[80%]"
                : undefined,
              props.menuStyle === MenuButtonStyleTypes.Responsive
                ? "fixed top-0 bottom-0 left-0 z-50 w-[80%] md:absolute md:right-0 md:mt-2 md:top-auto md:bottom-auto md:left-auto md:w-auto"
                : undefined,
            ])}
          >
            {nav || (
              <ul class="divide-y divide-gray-200">
                {navActions?.map((action) => (
                  <li>
                    <Action
                      actionStyle={ActionStyleTypes.None}
                      class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                      {...action}
                    />
                  </li>
                ))}
              </ul>
            )}
          </div>
        )}
      </div>
    </>
  );
}


import { ComponentChildren, JSX } from "../src.deps.ts";
import { MenuButton, MenuButtonStyleTypes } from "./MenuButton.tsx";
import { classSet } from "../utils/jsx.utils.ts";

export interface ResponsiveSetProps extends JSX.HTMLAttributes<HTMLElement> {
  menuStyle?: MenuButtonStyleTypes;

  toggleChildren: ComponentChildren;
}

export function ResponsiveSet(props: ResponsiveSetProps) {
  return (
    <>
      <MenuButton
        class="md:hidden"
        menuStyle={props.menuStyle || MenuButtonStyleTypes.Responsive}
        toggleChildren={props.toggleChildren}
      >
        {props.children}
      </MenuButton>

      <span
        {...props}
        class={classSet([
          "-:hidden -:md:flex -:flex-col -:md:flex-row -:md:items-center",
        ], props)}
      >
        {props.children}
      </span>
    </>
  );
}


import { ComponentChildren, JSX, useState } from "../src.deps.ts";
import { classSet } from "../utils/jsx.utils.ts";

export interface Tab {
  label: string;
  content: ComponentChildren;
}

export interface TabsProps extends JSX.HTMLAttributes<HTMLDivElement> {
  tabs: Tab[];
}

export function Tabs(props: TabsProps) {
  const { tabs, ...rest } = props;

  const [activeTab, setActiveTab] = useState(0);

  return (
    <div {...rest}>
      <div class="flex border-b border-gray-200">
        {tabs.map((tab, index) => (
          <button
            key={index}
            class={classSet([
              "py-2 px-4 font-medium text-sm",
              activeTab === index
                ? "border-b-2 border-blue-500 text-blue-500"
                : "text-gray-500 hover:text-gray-700",
            ])}
            onClick={() => setActiveTab(index)}
          >
            {tab.label}
          </button>
        ))}
      </div>
      <div class="mt-4">{tabs[activeTab].content}</div>
    </div>
  );
}


import { ComponentChildren, JSX } from "../src.deps.ts";
import { classSet } from "../utils/jsx.utils.ts";
import { DisplayProps, useDisplayChildren } from "../molecules/Display.tsx";
import { ActionProps, useActionChildren } from "../atoms/Action.tsx";
import { ActionGroup } from "../molecules/ActionGroup.tsx";

export interface FeaturesProps extends JSX.HTMLAttributes<HTMLDivElement> {
  callToAction?: ComponentChildren;

  children?: ComponentChildren | Array<DisplayProps>;
}

export function Features(props: FeaturesProps) {
  const { displayElement } = useDisplayChildren(props.children);

  return (
    <div
      {...props}
      class={classSet(["-:flex -:flex-col -:justify-center"], props)}
    >
      <div class="flex flex-col md:flex-row gap-8 justify-center md:flex-row md:gap-16 [&>*]:flex-grow [&>*]:basis-0">
        {displayElement}
      </div>

      {props.callToAction}
    </div>
  );
}


import { ComponentChildren, JSX } from "../src.deps.ts";
import { Action, ActionProps, ActionStyleTypes } from "../atoms/Action.tsx";
import { ActionGroup } from "../molecules/ActionGroup.tsx";
import { classSet } from "../utils/jsx.utils.ts";

export interface FooterProps extends JSX.HTMLAttributes<HTMLElement> {
  companyDescription?: string;

  companyName?: string;

  nav?: ComponentChildren | Array<ActionProps>;
}

export function Footer(props: FooterProps) {
  return (
    <footer
      {...props}
      class={classSet(["-:bg-gray-100 -:dark:bg-gray-800"], props)}
    >
      <div class="max-w-6xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
        <div class="md:flex justify-between">
          <div class="mb-4 md:mb-0">
            {props.companyName && (
              <Action
                href="/"
                class="text-2xl uppercase tracking-widest"
                actionStyle={ActionStyleTypes.Link | ActionStyleTypes.Rounded}
              >
                {props.companyName}
              </Action>
            )}

            {props.companyDescription && (
              <p class="text-gray-400 mt-2">{props.companyDescription}</p>
            )}
          </div>

          <div class="md:flex md:flex-col md:items-end">
            <ActionGroup
              actionStyle={ActionStyleTypes.Link | ActionStyleTypes.Rounded}
              class="flex flex-wrap justify-center -mx-2 mt-4 md:mt-0"
            >
              {props.nav}
            </ActionGroup>

            <div class="mt-4 md:mt-8">
              <p class="text-gray-400">
                &copy; {new Date().getFullYear()}{" "}
                {props.companyName}. All rights reserved.
              </p>
            </div>
          </div>
        </div>
      </div>
    </footer>
  );
}


import { ComponentChildren, JSX } from "../src.deps.ts";
import {
  Action,
  ActionAnchorProps,
  ActionButtonProps,
  ActionProps,
  ActionStyleTypes,
} from "../atoms/Action.tsx";
import { ActionGroup } from "../molecules/ActionGroup.tsx";
import { classSet } from "../utils/jsx.utils.ts";
import { MenuButton, MenuButtonStyleTypes } from "../molecules/MenuButton.tsx";

export type HeaderLogo = {
  LogoAlt?: string;

  LogoUrl?: string;

  LogoHref?: string;
} & JSX.HTMLAttributes<HTMLImageElement>;

export function useHeaderLogoChildren(
  children: ComponentChildren | HeaderLogo,
): {
  logo: ComponentChildren;
  logoDetails: HeaderLogo | undefined;
  logoAction: JSX.Element;
} {
  const isHeaderLogo = !!(children as HeaderLogo)?.LogoUrl;

  const logo = isHeaderLogo ? undefined : (children as ComponentChildren);

  const logoDetails = isHeaderLogo ? (children as HeaderLogo) : undefined;

  const logoAction = (
    <Action
      href={logoDetails?.LogoHref}
      actionStyle={ActionStyleTypes.Link | ActionStyleTypes.Rounded}
    >
      <img
        src={logoDetails?.LogoUrl}
        alt={logoDetails?.LogoAlt}
        {...(logoDetails || {})}
        class={classSet(
          ["-:w-48 -:sm:w-32 -:fill-black -:dark:fill-white"],
          logoDetails,
        )}
      />
    </Action>
  );

  return { logo, logoDetails, logoAction };
}

export interface HeaderProps extends JSX.HTMLAttributes<HTMLElement> {
  logo?: ComponentChildren | HeaderLogo;

  nav?: ComponentChildren | Array<ActionProps>;
}

export function Header(props: HeaderProps) {
  const { logo, logoAction } = useHeaderLogoChildren(props.logo);

  return (
    <header
      {...props}
      class={classSet(
        [
          "-:flex -:items-center -:justify-between -:bg-gray-100 -:dark:bg-gray-800",
        ],
        props,
      )}
    >
      <div class="px-4 py-3 sm:p-0">{logo || logoAction}</div>

      <ActionGroup class="flex-1">{props.nav}</ActionGroup>
    </header>
  );
}


import { ComponentChildren, JSX } from "../src.deps.ts";
import { ActionProps } from "../atoms/Action.tsx";
import { ActionGroup } from "../molecules/ActionGroup.tsx";
import { classSet } from "../utils/jsx.utils.ts";
import { Display, DisplayProps } from "../molecules/Display.tsx";

export enum HeroStyleTypes {
  Rounded = 1 << 0,
  Inset = 1 << 1,
  Horizonal = 1 << 2,
  None = 1 << 3,
}

export interface HeroProps extends DisplayProps {
  children?: ComponentChildren | Array<ActionProps>;

  callToAction?: string | ComponentChildren;

  heroStyle?: HeroStyleTypes;
}

export function Hero(props: HeroProps) {
  const callToAction = typeof props.callToAction === "string"
    ? <p class="text-xl max-w-lg text-blue-100">{props.callToAction}</p>
    : (
      props.callToAction as ComponentChildren
    );

  const heroStyle = props.heroStyle ||
    HeroStyleTypes.Rounded | HeroStyleTypes.Inset;

  return (
    <Display
      {...props}
      class={classSet(
        [
          "-:p-8 -:gap-8 -:drop-shadow-lg",
          (heroStyle & HeroStyleTypes.Inset) === HeroStyleTypes.Inset
            ? "-:w-[80%] -:my-8 -:mx-auto -:md:w-[90%] -:md:my-6 -:sm:w-[95%] -:sm:my-4 -:xs:w-[98%] -:xs:max-w-[98%] -:xs:my-2"
            : "-:w-full",
          "-:bg-cover -:bg-center -:bg-no-repeat -:bg-gray-100 -:text-white",
          (heroStyle & HeroStyleTypes.Rounded) === HeroStyleTypes.Rounded
            ? "-:rounded-3xl"
            : undefined,
        ],
        props,
      )}
    >
      <div
        class={classSet([
          "flex",
          (heroStyle & HeroStyleTypes.Horizonal) === HeroStyleTypes.Horizonal
            ? "flex-col [&>*]:mx-auto md:flex-row md:[&>*]:mx-2"
            : "flex-col [&>*]:mx-auto",
        ])}
      >
        {callToAction}

        <ActionGroup>{props.children}</ActionGroup>
      </div>
    </Display>
  );
}


import { ComponentChildren, JSX } from "../src.deps.ts";
import { Action, ActionProps, ActionStyleTypes } from "../atoms/Action.tsx";
import { Input, InputProps } from "../atoms/forms/Input.tsx";
import { ActionGroup } from "../molecules/ActionGroup.tsx";
import { classSet } from "../utils/jsx.utils.ts";

export type SignInOptions = {
  usernameInputProps?: InputProps;
  passwordInputProps?: InputProps;
  submitActionProps?: ActionProps;
  forgotPasswordActionProps?: ActionProps;
  formProps?: JSX.HTMLAttributes<HTMLFormElement>;
};

export interface SignInProps extends JSX.HTMLAttributes<HTMLElement> {
  oauthProviders?: Array<ActionProps>;
  signInOptions?: SignInOptions;
}

export function SignIn(props: SignInProps) {
  const { oauthProviders, signInOptions } = props;

  return (
    <div class={classSet(["-:flex -:flex-col -:space-y-4"], props)}>
      {oauthProviders && (
        <ActionGroup class="flex flex-col space-y-2">
          {oauthProviders.map((provider, index) => (
            <Action key={index} {...provider} />
          ))}
        </ActionGroup>
      )}

      {signInOptions && (
        <form {...signInOptions.formProps} class="flex flex-col space-y-2">
          <Input
            placeholder="Username"
            name="Username"
            {...signInOptions.usernameInputProps}
          />

          <Input
            placeholder="Password"
            type="password"
            name="password"
            {...signInOptions.passwordInputProps}
          />

          <div class="flex flex-col md:flex-row md:space-x-2 space-y-2 md:space-y-0 md:items-center">
            <Action
              actionStyle={ActionStyleTypes.Link}
              class="order-2 md:order-1"
              children={"Forgot Password"}
              {...signInOptions.forgotPasswordActionProps}
            />

            <Action
              type="submit"
              actionStyle={ActionStyleTypes.Solid | ActionStyleTypes.Rounded}
              class="order-1 md:order-2"
              children={"Submit"}
              {...signInOptions.submitActionProps}
            />
          </div>
        </form>
      )}
    </div>
  );
}


import { ForwardedRef, JSX } from "../src.deps.ts";
import { Action, ActionProps, ActionStyleTypes } from "../atoms/Action.tsx";
import { Input, InputProps } from "../atoms/forms/Input.tsx";
import { classSet } from "../utils/jsx.utils.ts";

export type SignUpOptions = {
  usernameInputProps?: InputProps;
  passwordInputProps?: InputProps;
  confirmPasswordInputProps?: InputProps;
  submitActionProps?: ActionProps;
  formProps?: JSX.HTMLAttributes<HTMLFormElement>;
};

export interface SignUpProps extends JSX.HTMLAttributes<HTMLElement> {
  signUpOptions?: SignUpOptions;
}

export function SignUp(props: SignUpProps) {
  const { signUpOptions } = props;

  return (
    <div class={classSet(["-:flex -:flex-col -:space-y-4"], props)}>
      {signUpOptions && (
        <form {...signUpOptions.formProps} class="flex flex-col space-y-2">
          <Input
            placeholder="Username"
            name="Username"
            {...signUpOptions.usernameInputProps}
          />
          <Input
            placeholder="Password"
            type="password"
            name="password"
            {...signUpOptions.passwordInputProps}
          />
          <Input
            placeholder="Confirm Password"
            type="password"
            name="confirmPassword"
            {...signUpOptions.confirmPasswordInputProps}
          />

          <Action
            {...signUpOptions.submitActionProps}
            type="submit"
            actionStyle={ActionStyleTypes.Solid | ActionStyleTypes.Rounded}
          />
        </form>
      )}
    </div>
  );
}


import { ComponentChildren } from "../src.deps.ts";
import { classSet } from "../utils/jsx.utils.ts";
import { Features, FeaturesProps } from "./Features.tsx";
import { DisplayStyleTypes } from "../molecules/Display.tsx";

export function buildTitle(
  stepNumber: number,
  title: ComponentChildren,
  complete: boolean,
  active: boolean,
): ComponentChildren {
  const textGradient = (
    <div
      class={classSet([
        complete
          ? "bg-gradient-to-tr from-green-500 to-blue-500/75"
          : active
          ? "bg-gradient-to-tr from-blue-500 to-purple-500/75"
          : "bg-gradient-to-tr from-blue-500 to-blue-700/75",
      ])}
    >
    </div>
  );

  const circleGradient = (
    <div
      class={classSet([
        complete
          ? "bg-gradient-to-br from-green-500 to-blue-700/75 py-2"
          : active
          ? "bg-gradient-to-br from-blue-500 to-purple-500/75"
          : "bg-gradient-to-br from-blue-500 to-blue-700/75",
      ])}
    >
    </div>
  );

  return (
    <h1
      class={classSet(
        [
          "text-2xl font-bold md:text-3xl inline-block my-4 bg-clip-text text-transparent",
        ],
        textGradient.props,
      )}
    >
      <span
        class={classSet(
          ["rounded-full px-4 py-1 border(solid 1) m-2 shadow-lg text-white"],
          circleGradient.props,
        )}
      >
        {complete ? "\u2713" : stepNumber}
      </span>

      {title}
    </h1>
  );
}

export interface StepFeature {
  children: ComponentChildren;

  class?: string;

  description?: string;

  title: string | ComponentChildren;
}

export interface StepsFeaturesProps extends FeaturesProps {
  children?: Array<StepFeature>;

  hideDescription?: boolean;

  step?: number;
}

export function StepsFeatures(props: StepsFeaturesProps) {
  return (
    <Features
      {...props}
      class={classSet(["-:m-2 -:md:m-8 -:text-center"], props)}
    >
      {props.children?.map((childStep: StepFeature, i) => {
        const active = props.step == i;

        const complete: boolean = (props.step as number) > i;

        const title = typeof childStep.title === "string"
          ? buildTitle(i + 1, childStep.title, complete, active)
          : childStep.title;

        return {
          title: title,
          class: classSet(
            ["-:shadow-lg -:p-4 -:m-4 -:justify-start -:sm:p-1 -:sm:m-1"],
            {
              class: childStep.class,
            },
          ),
          displayStyle: DisplayStyleTypes.Center,
          children: (
            <>
              <p class="m-2">{childStep.description}</p>

              {props.step === i && childStep.children}
            </>
          ),
        };
      })}
    </Features>
  );
}


import { ComponentChildren, JSX } from "../src.deps.ts";
import { classSet } from "../utils/jsx.utils.ts";
import { DisplayProps, useDisplayChildren } from "../molecules/Display.tsx";
import { ActionProps, useActionChildren } from "../atoms/Action.tsx";
import { ActionGroup } from "../molecules/ActionGroup.tsx";
import { Header, HeaderProps } from "../organisms/Header.tsx";
import { Footer, FooterProps } from "../organisms/Footer.tsx";

export interface BasicLayoutProps extends JSX.HTMLAttributes<HTMLDivElement> {
  footer?: FooterProps | ComponentChildren;

  header?: HeaderProps | ComponentChildren;

  children?: ComponentChildren;
}

export function BasicLayout(props: BasicLayoutProps) {
  const { headerProps, header } = {
    headerProps: (props.header as HeaderProps)?.nav
      ? props.header as HeaderProps
      : undefined,
    header: !(props.header as HeaderProps)?.nav
      ? props.header as ComponentChildren
      : undefined,
  };

  const { footerProps, footer } = {
    footerProps: (props.footer as FooterProps)?.nav
      ? props.footer as FooterProps
      : undefined,
    footer: !(props.footer as FooterProps)?.nav
      ? props.footer as ComponentChildren
      : undefined,
  };

  return (
    <>
      {headerProps ? <Header {...headerProps} /> : header}

      {props.children && (
        <main
          class={classSet(
            ["-:flex-grow", "-:min-h-[100vh]"],
            props,
          )}
        >
          {props.children}
        </main>
      )}

      {footerProps ? <Footer {...footerProps} /> : footer}
    </>
  );
}


import { classSet, JSX, moment, renderMarkdown } from "../src.deps.ts";

export type ChatBoxProps = Omit<JSX.HTMLAttributes<HTMLDivElement>, "icon"> & {
  color: string;

  content: string;

  icon: JSX.Element;

  justifyEnd?: boolean;

  timestamp: Date;
};

export function ChatBox(props: ChatBoxProps) {
  const contentMdx = renderMarkdown(props.content);

  return (
    <>
      <div
        class={classSet(
          [
            "-:flex -:w-full -:mt-2 -:mx-3",
            props.justifyEnd ? "-:ml-auto -:justify-end" : undefined,
          ],
          props,
        )}
      >
        <div
          class={classSet([
            "flex flex-col",
            props.justifyEnd ? "order-1" : "order-2",
          ])}
        >
          <div
            class={classSet([
              `bg-${props.color}-600 border-${props.color}-500`,
              "bg-opacity-10 border border-opacity-40 max-w-screen-xs lg:max-w-screen-sm xl:max-w-screen-md overflow-auto p-3 rounded-l-lg rounded-br-lg",
            ])}
          >
            <p
              class="text-sm [&_pre]:bg-gray-200 dark:[&_pre]:bg-gray-900 [&_pre]:text-grey-800 dark:[&_pre]:text-white [&_pre]:m-2 [&_pre]:p-2 [&_pre]:rounded-md [&_pre]:overflow-auto"
              dangerouslySetInnerHTML={{ __html: contentMdx }}
            >
            </p>
          </div>

          <span class="text-xs text-gray-500 leading-none">
            {moment(props.timestamp).from()}
          </span>
        </div>

        <div
          class={classSet([
            `bg-${props.color}-600 border-${props.color}-500 text-${props.color}-600`,
            "flex flex-shrink-0 h-6 w-6 md:h-10 md:w-10 justify-center rounded-full bg-opacity-10 border border-opacity-40 overflow-clip",
            props.justifyEnd ? "order-2 ml-2" : "order-1 mr-2",
          ])}
        >
          <div class="flex self-center">{props.icon}</div>
        </div>
      </div>
    </>
  );
}


import { useEffect, useRef } from "preact/hooks";
import {
  Action,
  classSet,
  ComponentChildren,
  Input,
  JSX,
} from "../src.deps.ts";

export type ChatInputProps =
  & Omit<
    JSX.HTMLAttributes<HTMLFormElement>,
    "icon"
  >
  & {
    children: ComponentChildren;

    icon?: ComponentChildren;

    placeholder?: string;

    hideOpenChat?: boolean;

    useOpenChat?: boolean;
  };

export function ChatInput(props: ChatInputProps) {
  const chatInputRef = useRef<HTMLFormElement>(null);

  props.id = props.id || "chat-input";

  const handleKeyDown = (event: KeyboardEvent) => {
    if (event.key === "Enter" && !event.shiftKey) {
      event.preventDefault();

      const formEl: HTMLFormElement = document.querySelector(`#${props.id}`)!;

      formEl.submit();
    }
  };

  const scrollIntoView = () => {
    setTimeout(() => {
      if (chatInputRef?.current) {
        chatInputRef?.current?.scrollIntoView();
      } else {
        scrollIntoView();
      }
    }, 0);
  };

  scrollIntoView();

  return (
    <form
      method="post"
      ref={chatInputRef}
      {...(props as JSX.HTMLAttributes<HTMLFormElement>)}
      class={classSet(
        [
          "-:my-3 -:rounded-md -:p-3 -:bg-blue-600 -:bg-opacity-10 -:border -:border-blue-500 -:border-opacity-40",
        ],
        props,
      )}
    >
      <div class="relative z-0 flex flex-col md:flex-row">
        <Input
          multiline={true}
          name="content"
          class="block w-full rounded-sm rounded-r-none border-gray-300 text-sm shadow-sm focus:z-10 dark:bg-slate-950 focus:border-primary-400 focus:ring focus:ring-primary-200 focus:ring-opacity-50 disabled:cursor-not-allowed disabled:bg-gray-50 disabled:text-gray-500 text-black"
          placeholder={props.placeholder ||
            "Ask Thinky... (Shift + Enter for a new line)"}
          onKeyDown={handleKeyDown}
        />

        <Action
          type="submit"
          for="version"
          class="flex items-center space-x-1 rounded-sm rounded-l-none border border-l-0 border-blue-600 bg-blue-600 px-3 py-1.5 text-center text-xs font-medium text-white shadow-sm transition-all hover:border-blue-800 hover:bg-blue-800 focus:ring focus:ring-blue-200 disabled:cursor-not-allowed disabled:border-blue-300 disabled:bg-blue-300"
        >
          {props.icon || props.children}
        </Action>
      </div>

      {!props.hideOpenChat && (
        <div class="mt-2">
          <label class="inline-flex items-center">
            <Input
              type="checkbox"
              name="useOpenChat"
              class="form-checkbox h-4 w-4 text-blue-600"
              checked={props.useOpenChat}
            />

            <span class="ml-2 text-gray-500">Use Open Chat</span>
          </label>
        </div>
      )}
    </form>
  );
}


import { JSX } from "preact";
import { ChatBox } from "../molecules/ChatBox.tsx";

export type ChatHistoryMessage = {
  Color: string;

  Content: string;

  Icon: JSX.Element;

  JustifyEnd?: boolean;

  Timestamp: Date;
};

export type ChatHistoryProps = {
  messages: ChatHistoryMessage[];
};

export function ChatHistory(props: ChatHistoryProps) {
  return (
    <>
      {props.messages.map((message, index) => {
        return (
          <ChatBox
            key={index}
            color={message.Color}
            content={message.Content}
            icon={message.Icon}
            justifyEnd={message.JustifyEnd}
            timestamp={message.Timestamp!}
          />
        );
      })}
    </>
  );
}
